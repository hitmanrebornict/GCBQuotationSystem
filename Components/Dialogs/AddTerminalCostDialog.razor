@inject MasterDataServices MDS
@inject DialogService DialogService
@inject NotificationService NotificationService

<div class="col-md-12">
    <div style="margin-bottom: 1rem" class="row">
        <div class="col-md-3">
            <RadzenLabel Text="Period Name" Component="PeriodName" style="width: 100%">
            </RadzenLabel>
        </div>
        <div class="col-md-9">
            <RadzenTextBox MaxLength="100" style="width: 100%" @bind-Value="terminalCost.PeriodName" Name="PeriodName" Placeholder="Please enter period name..." />
        </div>
    </div>
    
    <div style="margin-bottom: 1rem" class="row">
        <div class="col-md-3">
            <RadzenLabel Text="Terminal Period" Component="TerminalPeriod" style="width: 100%">
            </RadzenLabel>
        </div>
        <div class="col-md-9">
            <RadzenDropDown @bind-Value="terminalCost.TerminalPeriod" 
                           Data="availableTerminalPeriods" 
                           TextProperty="Text" 
                           ValueProperty="Date"
                           Name="TerminalPeriod"
                           style="width: 100%"
                           Placeholder="Select Terminal Period..." />
        </div>
    </div>
    
    <div style="margin-bottom: 1rem" class="row">
        <div class="col-md-3">
            <RadzenLabel Text="Life GBP" Component="LifeGbp" style="width: 100%">
            </RadzenLabel>
        </div>
        <div class="col-md-9">
            <RadzenNumeric @bind-Value="terminalCost.LifeGbp" Name="LifeGbp" Format="c2" style="width: 100%" />
        </div>
    </div>
    
    <div style="margin-bottom: 1rem" class="row">
        <div class="col-md-3">
            <RadzenLabel Text="Liquor" Component="Liquor" style="width: 100%">
            </RadzenLabel>
        </div>
        <div class="col-md-9">
            <RadzenNumeric @bind-Value="terminalCost.Liquor" Name="Liquor" Format="c2" style="width: 100%" />
        </div>
    </div>
    
    <div style="margin-bottom: 1rem" class="row">
        <div class="col-md-3">
            <RadzenLabel Text="Butter" Component="Butter" style="width: 100%">
            </RadzenLabel>
        </div>
        <div class="col-md-9">
            <RadzenNumeric @bind-Value="terminalCost.Butter" Name="Butter" Format="c2" style="width: 100%" />
        </div>
    </div>
    
    <div style="margin-bottom: 1rem" class="row">
        <div class="col-md-3">
            <RadzenLabel Text="Powder" Component="Powder" style="width: 100%">
            </RadzenLabel>
        </div>
        <div class="col-md-9">
            <RadzenNumeric @bind-Value="terminalCost.Powder" Name="Powder" Format="c2" style="width: 100%" />
        </div>
    </div>
    
    <div style="margin-bottom: 1rem" class="row">
        <div class="col-md-3">
            <RadzenLabel Text="Active" Component="Active" style="width: 100%">
            </RadzenLabel>
        </div>
        <div class="col-md-9">
            <RadzenCheckBox @bind-Value="terminalCost.Active" Name="Active" />
        </div>
    </div>
</div>

<div class="row">
    <div class="col offset-sm-3">
        <RadzenButton ButtonType="Radzen.ButtonType.Submit" Icon="save" Text="Save" ButtonStyle="ButtonStyle.Primary" Click="@HandleSubmit" IsBusy="@isSaving" />
        <RadzenButton ButtonStyle="ButtonStyle.Light" style="margin-left: 1rem" Text="Cancel" Click="@CancelDialog" />
    </div>
</div>

@code {
    [CascadingParameter]
    private Dialog _dialog { get; set; }
    
    private TerminalCost terminalCost = new TerminalCost();
    private List<TerminalPeriodOption> availableTerminalPeriods = new List<TerminalPeriodOption>();
    private List<DateOnly> existingTerminalPeriods = new List<DateOnly>();
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        // Set default values
        terminalCost.Active = true;
        
        // Fetch existing terminal periods from the database
        existingTerminalPeriods = await MDS.GetExistingTerminalPeriodsAsync();
        
        // Generate available terminal periods excluding existing ones
        GenerateTerminalPeriods();
        
        SetTitleContent();
        DialogService.Refresh();
    }

    private void GenerateTerminalPeriods()
    {
        // Get current year
        int currentYear = DateTime.Now.Year;
        
        // Generate terminal periods for the next 10 years
        for (int year = currentYear; year < currentYear + 10; year++)
        {
            // Add first day of March
            AddTerminalPeriodIfNotExists(year, 3, 1, $"Mar 1, {year}");
            
            // Add first day of May
            AddTerminalPeriodIfNotExists(year, 5, 1, $"May 1, {year}");
            
            // Add first day of July
            AddTerminalPeriodIfNotExists(year, 7, 1, $"Jul 1, {year}");
            
            // Add first day of September
            AddTerminalPeriodIfNotExists(year, 9, 1, $"Sep 1, {year}");
            
            // Add first day of December
            AddTerminalPeriodIfNotExists(year, 12, 1, $"Dec 1, {year}");
        }
    }

    private void AddTerminalPeriodIfNotExists(int year, int month, int day, string text)
    {
        var dateOnly = new DateOnly(year, month, day);
        
        // Only add if this date doesn't already exist in the database
        if (!existingTerminalPeriods.Contains(dateOnly))
        {
            availableTerminalPeriods.Add(new TerminalPeriodOption
            {
                Date = dateOnly,
                Text = text
            });
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            isSaving = true;
            
            // Validate required fields
            if (string.IsNullOrEmpty(terminalCost.PeriodName) || 
                terminalCost.TerminalPeriod == default(DateOnly))
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Please fill in all required fields.",
                    Duration = 4000
                });
                return;
            }
            
            await MDS.AddTerminalCostAsync(terminalCost);
            
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Success",
                Detail = "Terminal cost added successfully",
                Duration = 4000
            });
            
            DialogService.Close(true);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Failed to add terminal cost: {ex.Message}",
                Duration = 4000
            });
        }
        finally
        {
            isSaving = false;
        }
    }

    private void CancelDialog()
    {
        DialogService.Close(false);
    }
    
    void SetTitleContent()
    {
        _dialog.Title = null; // clear default title
        _dialog.Options.TitleContent = service =>
        @<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="10px">
            <h5>Add Terminal Cost</h5>
        </RadzenStack>;
    }

    // Helper class for dropdown options
    private class TerminalPeriodOption
    {
        public DateOnly Date { get; set; }
        public string Text { get; set; }
    }
} 