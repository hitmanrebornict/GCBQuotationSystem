@inject MasterDataServices MasterDataService
@inject DialogService DialogService
@inject NotificationService NotificationService

<div class="col-md-12">
    <div style="margin-bottom: 1rem" class="row">
        <div class="col-md-3">
            <RadzenLabel Text="Recipe Code" Component="RecipeCode" style="width: 100%">
            </RadzenLabel>
        </div>
        <div class="col-md-9">
            <RadzenTextBox MaxLength="100" style="width: 100%" @bind-Value="recipe.RecipeCode" Name="RecipeCode" Placeholder="Please enter recipe code..." />
        </div>
    </div>
    <div style="margin-bottom: 1rem" class="row">
        <div class="col-md-3">
            <RadzenLabel Text="Recipe Desc" Component="Recipe Description" style="width: 100%">
            </RadzenLabel>
        </div>
        <div class="col-md-9">
            <RadzenTextBox MaxLength="100" style="width: 100%" @bind-Value="recipe.RecipeDesc" Name="RecipeDesc" Placeholder="Please enter recipe desc..." />
        </div>
    </div>
    <div style="margin-bottom: 1rem" class="row">
        <div class="col-md-3">
            <RadzenLabel Text="Product type" Component="Product Type" style="width: 100%">
            </RadzenLabel>
        </div>
        <div class="col-md-9">
            <RadzenDropDown Data="@ProductTypeList" @bind-Value="@recipe.ProductType" TextProperty="TypeName"></RadzenDropDown>
        </div>
    </div>
    <div style="margin-bottom: 1rem" class="row">
        <div class="col-md-3">
            <RadzenLabel Text="Packaging Material" Component="Product Type" style="width: 100%">
            </RadzenLabel>
        </div>
        <div class="col-md-9">
            <RadzenDropDown Data="@PackagingMaterialList" @bind-Value="@recipe.PackagingMaterial" TextProperty="Packaging"></RadzenDropDown>
        </div>
    </div>

    @foreach(var rm in RawMaterialViewModelsList)
    {
        <div style="margin-bottom: 1rem" class="row">
            <div class="col-md-3">
                <RadzenLabel Text="@rm.RawMaterialItem.MaterialName" Component="Product Type" style="width: 100%">
                </RadzenLabel>
            </div>
            <div class="col-md-9">
                <RadzenNumeric TValue="Decimal" @bind-Value=@rm.Amount style="width: 100%" Change="@(async(value) => await TotalCostOnChange(value))"></RadzenNumeric>
            </div>
        </div>
    }
</div>

<div class="row">
    <div class="col offset-sm-3">
        <RadzenButton ButtonType="Radzen.ButtonType.Submit" Icon="save" Text="Save" ButtonStyle="ButtonStyle.Primary" Click="@(() => ButtonSubmitOnClick(recipe, RawMaterialViewModelsList))" />
        <RadzenButton ButtonStyle="ButtonStyle.Light" style="margin-left: 1rem" Text="Cancel" Click="@ButtonCancelOnClick" />
    </div>
</div>

@code {
    [Parameter]
    public int RecipeId { get; set; }

    private List<ProductType> ProductTypeList = new List<ProductType>();
    private List<PackagingMaterial> PackagingMaterialList = new List<PackagingMaterial>();
    public List<RawMaterialViewModel> RawMaterialViewModelsList = new List<RawMaterialViewModel>();

    [CascadingParameter]
    private Dialog _dialog { get; set; }

    private decimal ratio = 0;
    private Recipe recipe = new Recipe();

    public class RawMaterialViewModel
    {
        public RawMaterial RawMaterialItem { get; set; }
        public Decimal Amount { get; set; } = 0;
    }

    protected override async Task OnInitializedAsync()
    {
        // Load the recipe to edit
        recipe = await MasterDataService.GetRecipeByIdAsync(RecipeId);
        
        // Load dropdown data
        ProductTypeList = await MasterDataService.GetProductTypesAsync();
        PackagingMaterialList = await MasterDataService.GetPackagingMaterial();

        // Load all raw materials
        var allRawMaterials = await MasterDataService.GetAllRawMaterialsAsync();
        
        // Create view models for each raw material
        RawMaterialViewModelsList = allRawMaterials.Select(r => new RawMaterialViewModel
        {
            RawMaterialItem = r,
            // Set amount if this raw material is in the recipe
            Amount = recipe.RecipeIngredients
                .Where(ri => ri.MaterialId == r.MaterialId)
                .Select(ri => ri.Amount)
                .FirstOrDefault()
        }).ToList();

        // Calculate initial ratio
        CalculateRatio();
        
        SetTitleContent();
        DialogService.Refresh();
    }

    private void CalculateRatio()
    {
        ratio = RawMaterialViewModelsList.Sum(x => x.Amount);
    }

    private async void ButtonSubmitOnClick(Recipe recipe, List<RawMaterialViewModel> rawMaterialViewModels)
    {
        if(recipe.RecipeCode == null || recipe.RecipeDesc == null || recipe.ProductType == null || recipe.PackagingMaterial == null)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "Please fill in all required fields.",
                Duration = 4000
            });
            return;
        }
        else if (rawMaterialViewModels.Sum(x => x.Amount) != 100)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "The ratio must be 100%.",
                Duration = 4000
            });
            return;
        }
        else
        {
            // Clear existing ingredients and add updated ones
            recipe.RecipeIngredients.Clear();
            
            foreach(var rm in rawMaterialViewModels)
            {
                if(rm.Amount != 0)
                {
                    recipe.RecipeIngredients.Add(new RecipeIngredient
                    {
                        MaterialId = rm.RawMaterialItem.MaterialId,
                        Amount = rm.Amount
                    });
                }
            }

            await MasterDataService.UpdateRecipeAsync(recipe);

            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Success",
                Detail = "The recipe has been updated.",
                Duration = 4000
            });
            
            DialogService.Close(true);
        }
    }

    public void ButtonCancelOnClick()
    {
        DialogService.Close();
    }

    private async Task TotalCostOnChange(decimal value)
    {
        CalculateRatio();
        DialogService.Refresh();
        await InvokeAsync(StateHasChanged);
    }

    void SetTitleContent()
    {
        _dialog.Title = null; // clear default title
        _dialog.Options.TitleContent = service =>
        @<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="10px">
            <h5>Total ratio: <b>@ratio</b></h5>
        </RadzenStack>;
    }
} 