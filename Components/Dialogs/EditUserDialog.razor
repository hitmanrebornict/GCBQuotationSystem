@inject MasterDataServices MDS
@inject DialogService DialogService
@inject NotificationService NotificationService

<div class="col-md-12">
    <div style="margin-bottom: 1rem" class="row">
        <div class="col-md-3">
            <RadzenLabel Text="Username" Component="UserName" style="width: 100%">
            </RadzenLabel>
        </div>
        <div class="col-md-9">
            <RadzenTextBox MaxLength="100" style="width: 100%" @bind-Value="userName" Name="UserName" Placeholder="Username" />
        </div>
    </div>
    <div style="margin-bottom: 1rem" class="row">
        <div class="col-md-3">
            <RadzenLabel Text="Email" Component="Email" style="width: 100%">
            </RadzenLabel>
        </div>
        <div class="col-md-9">
            <RadzenTextBox style="width: 100%" @bind-Value="email" Name="Email" Placeholder="Please enter email..." />
        </div>
    </div>
    <div style="margin-bottom: 1rem" class="row">
        <div class="col-md-3">
            <RadzenLabel Text="Role" Component="Role" style="width: 100%">
            </RadzenLabel>
        </div>
        <div class="col-md-9">
            <RadzenDropDown TValue="string" Data=@roleList @bind-Value="selectedRole" style="width: 100%"></RadzenDropDown>
        </div>
    </div>
    <div style="margin-bottom: 1rem" class="row">
        <div class="col-md-3">
            <RadzenLabel Text="Active" Component="Active" style="width: 100%">
            </RadzenLabel>
        </div>
        <div class="col-md-9">
            <RadzenSwitch @bind-Value="@isActive" Name="Active" />
        </div>
    </div>
</div>

<div class="row">
    <div class="col offset-sm-3">
        <RadzenButton ButtonType="Radzen.ButtonType.Submit" Icon="save" Text="Save" ButtonStyle="ButtonStyle.Primary" Click="@HandleSubmit" />
        <RadzenButton ButtonStyle="ButtonStyle.Light" style="margin-left: 1rem" Text="Cancel" Click="@CancelDialog" />
    </div>
</div>

@code {
    [Parameter]
    public AspNetUser selectedUser { get; set; }

    [CascadingParameter]
    private Dialog _dialog { get; set; }

    private string userName;
    private string email;
    private string selectedRole;
    private bool isActive;

    private List<string> roleList = new List<string>()
    {
        "Admin", "User", "Marketing User", "Marketing Admin"
    };

    protected override async Task OnInitializedAsync()
    {
        if (selectedUser != null)
        {
            userName = selectedUser.UserName;
            email = selectedUser.Email;
            isActive = selectedUser.Active;
            selectedRole = selectedUser.Roles.FirstOrDefault()?.Name ?? "User";
        }

        SetTitleContent();
        DialogService.Refresh();
    }

    private async Task HandleSubmit()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(userName))
            {
                NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Username is required.",
                    Duration = 4000
                });
                return;
            }

            selectedUser.UserName = userName;
            selectedUser.Email = email;
            selectedUser.Active = isActive;

            await MDS.UpdateUserAsync(selectedUser, selectedRole);

            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Success",
                Detail = "User updated successfully",
                Duration = 4000
            });

            DialogService.Close(true);
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Failed to update user: {ex.Message}",
                Duration = 4000
            });
        }
    }

    private void CancelDialog()
    {
        DialogService.Close(false);
    }

    void SetTitleContent()
    {
        _dialog.Title = null; // clear default title
        _dialog.Options.TitleContent = service =>
        @<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" Gap="10px">
            <h5>Edit User</h5>
        </RadzenStack>;
    }
}
