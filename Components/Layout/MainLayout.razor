@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject UserPreferenceSettings UserPreferenceSetting
@inject ProtectedLocalStorage localStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject SignInManager<IdentityUser> SignInManager

<RadzenComponents @rendermode="InteractiveServer" />

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <link rel="icon" href="~/favicon.ico" type="image/x-icon">
            <CascadingAuthenticationState>
                <AuthorizeView>
                    <Authorized>
                        <div class="logout-container">
                            <RadzenText TextStyle="TextStyle.Body2" class="user-greeting">
                                Welcome, @context.User.Identity?.Name
                            </RadzenText>
                            <RadzenButton ButtonType="ButtonType.Button"
                                          ButtonStyle="ButtonStyle.Danger"
                                          Size="ButtonSize.Small"
                                          Icon="logout"
                                          Text="Logout"
                                          Click="HandleLogout"
                                          class="logout-btn-radzen" />
                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <RadzenLink Path="/login" Text="Log In" />
                    </NotAuthorized>
                </AuthorizeView>
            </CascadingAuthenticationState>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

<style>
    .logout-container {
        display: flex;
        align-items: center;
        gap: 1rem;
        margin-left: auto;
    }

    .user-greeting {
        color: #6c757d;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .logout-btn {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        background: linear-gradient(135deg, #dc3545, #c82333);
        color: white;
        border: none;
        border-radius: 0.5rem;
        font-size: 0.9rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(220, 53, 69, 0.2);
    }

        .logout-btn:hover {
            background: linear-gradient(135deg, #c82333, #a71e2a);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
        }

        .logout-btn:active {
            transform: translateY(0);
            box-shadow: 0 2px 4px rgba(220, 53, 69, 0.2);
        }

    .logout-icon {
        font-size: 1rem;
        transition: transform 0.3s ease;
    }

    .logout-btn:hover .logout-icon {
        transform: translateX(2px);
    }

    .login-link {
        color: #007bff;
        text-decoration: none;
        font-weight: 500;
        padding: 0.5rem 1rem;
        border-radius: 0.25rem;
        transition: all 0.3s ease;
    }

        .login-link:hover {
            background-color: rgba(0, 123, 255, 0.1);
            text-decoration: none;
        }

    .top-row {
        display: flex;
        align-items: center;
        justify-content: flex-end;
    }
</style>

@code {
    private async Task HandleLogout()
    {
        try
        {
            // Clear any local storage data if needed
            await localStorage.DeleteAsync("currency");
            await localStorage.DeleteAsync("weightUnit");
            
            // Navigate to the logout page which will handle the actual sign out
            Navigation.NavigateTo("/customizeLogout", forceLoad: true);
        }
        catch (Exception ex)
        {
            // Handle any errors
            Console.WriteLine($"Logout error: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var currency = await localStorage.GetAsync<string>("currency");
            var weightUnit = await localStorage.GetAsync<string>("weightUnit");

            if (!string.IsNullOrEmpty(currency.Value))
            {
                UserPreferenceSetting.Currency = currency.Value;
            }

            if (!string.IsNullOrEmpty(weightUnit.Value))
            {
                UserPreferenceSetting.WeightUnit = weightUnit.Value;
            }

            // Ensure culture is updated based on currency
            UserPreferenceSetting.UpdateCultureBasedOnCurrency();
            Console.WriteLine("This is weight ratio");
            Console.WriteLine(UserPreferenceSetting.Currency);

            UserPreferenceSetting.WeightRatio = UserPreferenceSetting.GetWeightRatio();
            Console.WriteLine(UserPreferenceSetting.WeightRatio);
            await InvokeAsync(StateHasChanged);
        }
    }
}

