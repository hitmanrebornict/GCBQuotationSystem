@attribute [Authorize]

@page "/"
@inject MasterDataServices MDS
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject GenerateQuoteServices GenerateQuoteService
@inject QuoteDataServices QuoteDataService
@inject NavigationManager NavigationManager
@inject UserPreferenceSettings UserPreferenceSetting

<PageTitle>Home</PageTitle>
<RadzenCard class="p-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <RadzenText Text="New Quotation" TextStyle="TextStyle.DisplayH5" class="mb-0"></RadzenText>
        <RadzenButton Text="Generate" Click="@GenerateQuote" ButtonStyle="ButtonStyle.Primary" class="px-4"></RadzenButton>
    </div>

    <hr class="my-4" />

    <div class="row mb-4">
        <div class="col-md-4 mb-3">
            <RadzenText TextStyle="TextStyle.Subtitle2" class="mb-2">Customer</RadzenText>
            <RadzenDropDown TValue="int"
            @bind-Value="selectedCustomer"
            Data="@customers"
            TextProperty="CustName"
            ValueProperty="CustNo"
            Placeholder="Select Customer"
            Change="OnCustomerChanged"
            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" 
            FilterOperator="StringFilterOperator.StartsWith" 
            AllowFiltering="true"
                            Style="width: 100%" />
        </div>
        <div class="col-md-4 mb-3">
            <RadzenText TextStyle="TextStyle.Subtitle2" class="mb-2">Delivery Address</RadzenText>
            <RadzenDropDownDataGrid
            @bind-Value="selectedDelivery"
            Data="@deliveryAddresses"
            Change="@( async ()=> await OnDeliveryChanged(selectedDelivery))"
            TextProperty="DeliveryName"
            Placeholder="Select Delivery Address"
            Style="width: 100%"
            >
                <Columns>
                    <RadzenDropDownDataGridColumn Property="DeliveryName" Title="Delivery Name" Width="150px" />
                    <RadzenDropDownDataGridColumn Property="Address1" Title="Address 1" Width="150px" />
                    <RadzenDropDownDataGridColumn Property="Address2" Title="Address 2" Width="150px" />
                    <RadzenDropDownDataGridColumn Property="City" Title="City" Width="100px" />
                    <RadzenDropDownDataGridColumn Property="Postcode" Title="Post Code" Width="100px" />
                </Columns>
            </RadzenDropDownDataGrid>
        </div>

        <div class="col-md-4 mb-3">
            <RadzenText TextStyle="TextStyle.Subtitle2" class="mb-2">Delivery Cost</RadzenText>
            <RadzenDropDownDataGrid 
            @bind-Value="selectedDeliveryCost"
            Data="@deliveryCost"
            TextProperty="PostCode"
            Placeholder="Select Delivery Cost">

                <Columns>
                    <RadzenDropDownDataGridColumn Property="Zone" Title="Zone" Width="100px" />
                    <RadzenDropDownDataGridColumn Property="PostCode" Title="Post Code" Width="150px" />
                    <RadzenDropDownDataGridColumn Property="Pallet" Title="Pallet" Width="150px" />
                    <RadzenDropDownDataGridColumn Property="ServiceHours" Title="Service Hours" Width="150px" />
                    <RadzenDropDownDataGridColumn Property="Cost" Title="Cost" Width="150px" />
                </Columns>
            </RadzenDropDownDataGrid>

        </div>
    </div>

    <RadzenText TextStyle="TextStyle.H6" class="mb-3">Recipe Periods</RadzenText>

    <RadzenDataGrid @ref="grid" 
    Data="@RecipePeriods" 
    TItem="RecipePeriod"
    GridLines="DataGridGridLines.Horizontal"
    AllowFiltering="false"
    AllowColumnResize="true"
    AllowAlternatingRows="true"
    Style="min-width: 1200px; overflow-x: auto;">
        <Columns>
            <RadzenDataGridColumn TItem="RecipePeriod" Title="Recipe" MinWidth="200px">
                <Template Context="data">
                    <RadzenDropDown @bind-Value="data.SelectedRecipe"
                    Data="@recipes"
                    TextProperty="RecipeCode"
                    Style="width:100%; "
                    Change="@(() => OnRecipeSelected(data))"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    FilterOperator="StringFilterOperator.StartsWith"
                                    AllowFiltering="true" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RecipePeriod" Title="Period From" MinWidth="150px">
                <Template Context="data">
                    <RadzenDatePicker @bind-Value="data.PeriodFrom"
                    DateFormat="MM/yyyy"
                    ShowDays=false
                    CurrentDateChanged="@(date => OnFromDateChanged(date, data))"
                    Style="width:100%;" />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RecipePeriod" Title="Period To" MinWidth="150px">
                <Template Context="data">
                    <RadzenDatePicker @bind-Value="data.PeriodTo"
                    DateFormat="MM/yyyy"
                    ShowDays=false
                    CurrentDateChanged="@(date => OnToDateChanged(date, data))"
                    Style="width:100%; " />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RecipePeriod" Title="Packaging Material" MinWidth="200px">
                <Template Context="data">
                    <RadzenDropDownDataGrid @bind-Value="data.SelectedPackagingMaterial"
                    Data="@packagingMaterials"
                    TextProperty="Packaging"
                    Style="width:100%;"
                    AllowFiltering="true"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    >
                        <Columns>
                            <RadzenDropDownDataGridColumn Property="Type" Title="Type" Width="100px" />
                            <RadzenDropDownDataGridColumn Property="Packaging" Title="Packaging" Width="150px" />
                        </Columns>
                    </RadzenDropDownDataGrid>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RecipePeriod" Title="Production Cost" MinWidth="200px">
                <Template Context="data">
                    <RadzenDropDown @bind-Value="data.SelectedProductionCost"
                    Data="@productionCosts"
                      TextProperty="ProductType"
                    Style="width:100%; " />
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="RecipePeriod" Title="Premium" MinWidth="250px">
                <Template Context="data">
                    <RadzenDropDown @bind-Value="data.SelectedPremiumList"
                    Data="@premiums"
                    TextProperty="PremiumName"
                    Multiple="true"
                    Style="width:100%; " />
                </Template>
            </RadzenDataGridColumn>


        </Columns>
    </RadzenDataGrid>
</RadzenCard>


@code {
    // Lists to hold the data
    List<Customer> customers = new();
    List<CustomerDeliveryDetail> deliveryAddresses = new();
    DeliveryCost selectedDeliveryCost = new();
    List<ProductionCost> productionCosts = new();

    public class RecipePeriod
    {
        public Recipe SelectedRecipe { get; set; }
        public DateTime? PeriodFrom { get; set; } = DateTime.Now;
        public DateTime? PeriodTo { get; set; }
        public List<Premium> SelectedPremiumList { get; set; } = new();
        public Decimal SelectedQuantity { get; set; } = 1000;
        public PackagingMaterial SelectedPackagingMaterial { get; set; }
        public ProductionCost SelectedProductionCost { get; set; }
    }

    private List<RecipePeriod> RecipePeriods = new();

    RadzenDataGrid<RecipePeriod>? grid;

    private void OnRecipeSelected(RecipePeriod selectedRow)
    {
        if (selectedRow == RecipePeriods.Last() && selectedRow.SelectedRecipe != null)
        {
            RecipePeriods.Add(new RecipePeriod());
            recipes.Remove(selectedRow.SelectedRecipe);
            grid.Reload();
            StateHasChanged();
        }
    }

    // Selected values
    int selectedCustomer;
    CustomerDeliveryDetail selectedDelivery = new();

    List<Recipe> recipes = new();
    List<Premium> premiums = new();
    List<RecipeTotalCost> recipeTotalCostList = new List<RecipeTotalCost>();
    List<PackagingMaterial> packagingMaterials = new();
    List<DeliveryCost> deliveryCost = new();

    protected override async Task OnInitializedAsync()
    {
        // Load all customers
        customers = await MDS.GetAllCustomersAsync();
        recipes = await MDS.GetRecipesAsync();
        var recipeGroupBy = recipes.GroupBy(r => r.ProductType.TypeName).ToList();
        premiums = await MDS.GetAllPremiumsAsync();
        productionCosts = await MDS.GetProductionCostsAsync();

        packagingMaterials = await MDS.GetAllPackagingMaterialsAsync();
        deliveryCost = await MDS.GetDeliveryCostAsync();


        RecipePeriods.Add(new RecipePeriod(){
            PeriodFrom = DateTime.Now,
        });
        await grid.Reload();
        await InvokeAsync(StateHasChanged);
    }

    async Task OnCustomerChanged(object value)
    {
        if (selectedCustomer > 0)
        {
            // Load delivery addresses for the selected customer
            deliveryAddresses = await MDS.GetDeliveryDetailsForCustomerAsync(selectedCustomer);

            if(deliveryAddresses.Count() == 1){
                selectedDelivery = deliveryAddresses.First();
                Console.WriteLine("in the OnCustomerCHanged");
                await OnDeliveryChanged(selectedDelivery);
            }
            else{
                selectedDelivery = new();
            }
        }
        else
        {
            deliveryAddresses.Clear();
        }
    }

    private async Task GenerateQuote()
    {
        // Validation checks
        if (selectedCustomer <= 0)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Validation Error", "Please select a customer.");
            return;
        }

        if (selectedDelivery == null || selectedDelivery.DeliveryId <= 0)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Validation Error", "Please select a delivery address.");
            return;
        }

        if (selectedDeliveryCost == null || string.IsNullOrEmpty(selectedDeliveryCost.PostCode))
        {
            NotificationService.Notify(NotificationSeverity.Error, "Validation Error", "Please select a delivery cost.");
            return;
        }



        // Validate recipe periods
        if (!RecipePeriods.Any(rp => rp.SelectedRecipe != null))
        {
            NotificationService.Notify(NotificationSeverity.Error, "Validation Error", "Please select at least one recipe.");
            return;
        }

        // Check each recipe period for required fields
        foreach (var period in RecipePeriods.Where(rp => rp.SelectedRecipe != null))
        {
            if (period.PeriodFrom == null)
            {
                NotificationService.Notify(NotificationSeverity.Error, "Validation Error", "Please select a start period for all recipes.");
                return;
            }

            // if (period.SelectedPackagingMaterial == null)
            // {
            //     NotificationService.Notify(NotificationSeverity.Error, "Validation Error", 
            //         $"Please select packaging material for recipe {period.SelectedRecipe.RecipeCode}.");
            //     return;
            // }
        }

        var WeightRatio = UserPreferenceSetting.WeightRatio;

        QuoteDataService.newQuotation = new Quote
            {
                CustomerId = selectedCustomer,
                DeliveryDetailId = selectedDelivery.DeliveryId,
                CreatedAt = DateTime.Now
            };

        // Create a list to store the QuotationRecipe objects in memory
        var quotationRecipes = new List<QuotationRecipe>();


        List<AdditionalCost> additionalCostsList = await GenerateQuoteService.GetAdditionalCosts();

        // Generate the QuotationRecipe records for each RecipePeriod
        foreach (var recipePeriod in RecipePeriods)
        {
            decimal localTotalCost = 0;
            decimal butterPrice = 0;
            decimal liquorPrice = 0;
            decimal yieldCost, totalRawMaterialCost = 0;
            if (recipePeriod.SelectedRecipe != null)
            {
                DateTime startDate = recipePeriod.PeriodFrom ?? DateTime.MinValue;
                DateTime endDate = recipePeriod.PeriodTo ?? startDate;

                // If PeriodTo is null, treat the period as a single month
                if (recipePeriod.PeriodTo == null)
                {
                    endDate = startDate;
                }

                // Generate the list of months between startDate and endDate
                var periodMonths = GetMonthsBetweenDates(startDate, endDate);

                foreach (var month in periodMonths)
                {
                    var dateOnlyMonth = DateOnly.FromDateTime(month);
                    string quarter = GenerateQuoteService.GetQuarter(dateOnlyMonth);
                    decimal selectedQuantity = recipePeriod.SelectedQuantity;

                    //Create New QuotationRecipe
                    var quotationRecipe = new QuotationRecipe
                        {
                            Recipe = recipePeriod.SelectedRecipe,
                            RecipeId = recipePeriod.SelectedRecipe.RecipeId,
                            PeriodMonth = dateOnlyMonth,
                            Quantity = recipePeriod.SelectedQuantity
                        };



                    //Calculate Terminal Cost
                    var terminalCost = await GenerateQuoteService.GetTerminalCostByDate(dateOnlyMonth);

                    var quotationTerminalCost = new QuotationTerminalCost
						{
							TerminalName = terminalCost.PeriodName,
                            TerminalPeriod = terminalCost.TerminalPeriod,
							LifeGbp = terminalCost.LifeGbp,
                            Liquor = terminalCost.Liquor,
                            Butter = terminalCost.Butter,
							Powder = terminalCost.Powder
						};

                    quotationRecipe.QuotationTerminalCost = quotationTerminalCost;

                    //Calculate Raw Material Cost
                    var rawMaterialPrice = await GenerateQuoteService.GetRawMaterialCostByRecipeID(dateOnlyMonth);

                    foreach(var rmp in rawMaterialPrice){
                        if(rmp.Material.MaterialName == "Cocoa Mass"){
                            rmp.Price = QuoteDataService.CalculateMassTotal(quotationTerminalCost.Liquor , quotationTerminalCost.LifeGbp);
                            liquorPrice = rmp.Price;
                        }
                        else if(rmp.Material.MaterialName == "Cocoa Butter"){
                            rmp.Price = QuoteDataService.CalculateButterTotal(quotationTerminalCost.Butter, quotationTerminalCost.LifeGbp);
                            butterPrice = rmp.Price;
                        }
                    }

                    var rawPriceDict = rawMaterialPrice.ToDictionary(p => p.MaterialId, p => p.Price);

                    var quotationRawMaterialCostsList = recipePeriod.SelectedRecipe.RecipeIngredients
                                .Where(i => rawPriceDict.ContainsKey(i.MaterialId))
                                .Select(i => new QuotationRawMaterialCost
                                    {
                                        MaterialName = i.Material.MaterialName.ToString(),
                                        Cost = rawPriceDict[i.MaterialId],
                                        CostAmount = rawPriceDict[i.MaterialId] * (i.Amount / 100),

                                    }).ToList();

                    //Add Premium into QuotationRecipe
                    if (recipePeriod.SelectedPremiumList != null || recipePeriod.SelectedPremiumList.Count() > 0)
                    {
                        List<QuotationPremiumCost> quotationPremiumList = new List<QuotationPremiumCost>();

                        foreach (var selectedPremium in recipePeriod.SelectedPremiumList)
                        {
                            decimal PremiumCost = 0;

                            if (selectedPremium.PremiumType == "Butter") {
                                PremiumCost = recipePeriod.SelectedRecipe.RecipeIngredients.First(r => r.MaterialId == 14).Amount / 100 * selectedPremium.PremiumCost;
                            }
                            else if (selectedPremium.PremiumType == "Liquor"){
                                PremiumCost = recipePeriod.SelectedRecipe.RecipeIngredients.First(r => r.MaterialId == 13).Amount / 100 * selectedPremium.PremiumCost;

                            }


                            QuotationPremiumCost qpc = new QuotationPremiumCost()
                                {
                                    PremiumName = selectedPremium.PremiumName,
                                    Cost = selectedPremium.PremiumCost,
                                    CostAmount = PremiumCost
                                };

                            quotationPremiumList.Add(qpc);
                        }

                        quotationRecipe.QuotationPremiumCosts = quotationPremiumList;
                    }

                    //Add Production Cost into QuotationRecipe
                    if (recipePeriod.SelectedProductionCost != null )
                    {
                        quotationRecipe.QuotationProductionCost = new QuotationProductionCost
                        {
                            ProductType = recipePeriod.SelectedProductionCost.ProductType,
                            ProductTypeCost = recipePeriod.SelectedProductionCost.ProductTypeCost,
                        };
                    }

                    totalRawMaterialCost = quotationRawMaterialCostsList.Sum(s => s.CostAmount);
                    yieldCost = totalRawMaterialCost * 1 / 100;

                    quotationRecipe.QuotationRawMaterialCosts = quotationRawMaterialCostsList;
                    quotationRecipe.Recipe.RecipeIngredients = recipePeriod.SelectedRecipe.RecipeIngredients;


                    //Calculate Packaging Cost
                    if(recipePeriod.SelectedRecipe.PackagingMaterial != null && recipePeriod.SelectedPackagingMaterial != null && recipePeriod.SelectedPackagingMaterial.CostGbpton.HasValue)
                    {
                        quotationRecipe.QuotationPackagingCost = new QuotationPackagingCost
                        {
                            PackagingName = recipePeriod.SelectedRecipe.PackagingMaterial.Packaging,
                            Cost = recipePeriod.SelectedPackagingMaterial.CostGbpton.Value,
                            CostAmount = recipePeriod.SelectedPackagingMaterial.CostGbpton.Value
                        };
                    }
                    else
                    {
                        quotationRecipe.QuotationPackagingCost = new QuotationPackagingCost
                        {
                            PackagingName = "-",
                            Cost = 0,
                            CostAmount = 0,
                        };
                    }

                  

                    quotationRecipe.QuotationDeliveryCost = new QuotationDeliveryCost
                        {
                           DeliveryName = selectedDelivery.DeliveryName,
                           CostAmount = selectedDeliveryCost.Cost,
                        };

                    quotationRecipe.QuotationProductionCost = new QuotationProductionCost
                    {
                        ProductType =  recipePeriod.SelectedProductionCost.ProductType,
                        ProductTypeCost = recipePeriod.SelectedProductionCost.ProductTypeCost
                    };


                    foreach(var ac in additionalCostsList)
                    {
                        decimal costAmount = ac.CostName == "Yield" 
                            ? totalRawMaterialCost * 1 / 100 
                            : ac.DefaultAmount;

                        var additionalCost = new QuotationAdditionalCost
                        {
                            CostName = ac.CostName,
                            Cost = ac.DefaultAmount,
                            CostAmount = costAmount,
                        };

                        quotationRecipe.QuotationAdditionalCosts.Add(additionalCost);
                    }

                    // Add each QuotationRecipe to the list in memory
                    quotationRecipes.Add(quotationRecipe);


                    localTotalCost = (quotationRecipe.QuotationPremiumCosts?.Sum(x => x.CostAmount) ?? 0) +
                    (quotationRecipe.QuotationRawMaterialCosts?.Sum(x => x.CostAmount) ?? 0) +
                    (quotationRecipe.QuotationPackagingCost?.CostAmount ?? 0) +
                    (quotationRecipe.QuotationDeliveryCost?.CostAmount ?? 0) +
                    (quotationRecipe.QuotationAdditionalCosts?.Sum(x => x.CostAmount) ?? 0) + 
                    (quotationRecipe.QuotationProductionCost?.ProductTypeCost ?? 0);

                    var recipeTotalCost = new RecipeTotalCost
                        {
                            QuotationRecipe1 = quotationRecipe,
                            TotalCost = localTotalCost,
                            Quarter = quarter,
                            RawMaterialPriceDetailList = rawMaterialPrice,
                            CustomerDeliveryDetail = selectedDelivery,
                        };

                    recipeTotalCostList.Add(recipeTotalCost);
                }
            }
            else;
        }

        QuoteDataService.OriginalRecipeTotalList = recipeTotalCostList;

        QuoteDataService.RecipeTotalCostList = QuoteDataService.ConvertRecipeCostListToPreferredUnit(recipeTotalCostList, UserPreferenceSetting.WeightRatio);

        QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareCostMatrix(QuoteDataService.RecipeTotalCostList);

        // Optionally show a notification or close the dialog
        NotificationService.Notify(NotificationSeverity.Success, "Quotation generated successfully.");
        // }

        // Navigate to the next page (QuoteDetailPage)
        NavigationManager.NavigateTo("/SaveNewQuote");
    }

    private List<DateTime> GetMonthsBetweenDates(DateTime startDate, DateTime endDate)
    {
        var months = new List<DateTime>();

        for (var dt = startDate; dt <= endDate; dt = dt.AddMonths(1))
        {
            months.Add(new DateTime(dt.Year, dt.Month, 1));  // Start of each month
        }

        Console.WriteLine(string.Join(", ", months));
        return months;


    }

    private List<RecipeCostMatrix> recipeCostMatrix = new();




    void OnFromDateChanged(DateTime args, RecipePeriod data)
    {
        data.PeriodFrom = new DateTime(args.Year, args.Month, 1);
    }

    void OnToDateChanged(DateTime args, RecipePeriod data)
    {
        data.PeriodTo = new DateTime(args.Year, args.Month, DateTime.DaysInMonth(args.Year, args.Month));
    }

    async Task OnDeliveryChanged(object value)
    {

        var localDeliveryCost = await MDS.GetDeliveryCostAsync();

        string customerPostCode = selectedDelivery.Postcode;


        // Find matching delivery costs where the customer's postcode is contained
        // in the delivery cost postcodes
        if (string.IsNullOrEmpty(customerPostCode))
        {
            // If customer postcode is null or empty, show the complete list
            deliveryCost = localDeliveryCost.ToList();
          
        }
        else
        {
            deliveryCost = localDeliveryCost.Where(dc => 
                !string.IsNullOrEmpty(dc.PostCode) && 
                dc.PostCode.Contains(customerPostCode)
            ).ToList();
            
            // If no matches found, show the complete list
            if (deliveryCost.Count == 0)
            {
                deliveryCost = localDeliveryCost.ToList();
            }
       
        }

        await InvokeAsync(StateHasChanged);
    }

}

