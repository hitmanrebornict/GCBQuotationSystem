
@inject MasterDataServices MDS
@inject NotificationService NotificationService
@inject DialogService DialogService

<PageTitle>Home</PageTitle>

<h1>New Quotation</h1>

<RadzenText Text="Customer:"></RadzenText>
<RadzenDropDown TValue="int"
@bind-Value="selectedCustomer"
Data="@customers"
TextProperty="CustName"
ValueProperty="CustNo"
Placeholder="Select Customer"
Change="OnCustomerChanged"
Style="width:200px" />

<RadzenDropDown TValue="int"
@bind-Value="selectedDelivery"
Data="@deliveryAddresses"
TextProperty="DeliveryName"
ValueProperty="DeliveryId"
Placeholder="Select Delivery Address"
Style="width:200px" />
<hr/>

<RadzenText Text="Recipe:"></RadzenText>
<RadzenDropDown TValue="int"
@bind-Value="selectedProductType"
Data="@productTypes"
TextProperty="TypeName"
ValueProperty="ProductTypeId"
Placeholder="Select Product Type"
Style="width:200px" />

<RadzenDropDown TValue="int"
                @bind-Value="selectedRecipeId"
                Data="@recipes"
                TextProperty="RecipeDesc"
                ValueProperty="RecipeId"
                Placeholder="Select Recipe"
                Change="OnRecipeChanged"
                Style="width:300px" />

                <RadzenTextBox Placeholder="Amount"/>
@* @if (selectedRecipe != null)
{
    <div style="margin-top:20px">
        <h4>Recipe Details</h4>
        <p><strong>Code:</strong> @selectedRecipe.RecipeCode</p>
        <p><strong>Description:</strong> @selectedRecipe.RecipeDesc</p>
        <p><strong>Product Type:</strong> @selectedRecipe.ProductTypeId</p>
        <p><strong>Packaging Material:</strong> @selectedRecipe.PackagingMaterialId</p>
    </div>

    <RadzenDataGrid Data="@selectedRecipeIngredients" TItem="RecipeIngredient" AllowPaging="false" ShowPagingSummary="true">
        <Columns>
            <RadzenDataGridColumn TItem="RecipeIngredient" Property="Material.MaterialName" Title="Material" />
            <RadzenDataGridColumn TItem="RecipeIngredient" Property="Amount" Title="Amount (% per 100g)" FormatString="{0:N2}" />
        </Columns>
    </RadzenDataGrid>
} *@
<hr/>

<RadzenText Text="Premium Cost:"></RadzenText>
 <!-- Premium Cost Section -->
            <RadzenCard Title="Premium Cost" Style="margin-bottom:20px;">
                <div class="row">
                    <div class="col-md-12">
                        <RadzenLabel Text="Select Premium Option:" />
                        <RadzenDropDown TValue="string" 
                                        @bind-Value="costDetails.PremiumCost" 
                                        Data="@premiumOptions" 
                                        Placeholder="Choose an option"
                                        Style="width:100%;" />
                    </div>
                </div>
            </RadzenCard>

<RadzenText Text="Additional Cost:"></RadzenText>
            <!-- Additional Cost Section -->
            <RadzenCard Title="Delivery Cost" Style="margin-bottom:20px;">
                <div class="row" style="margin-bottom:10px">
                    <div class="col-md-6">
                        <RadzenLabel Text="Additional Cost Name:" />
                    </div>
                    <div class="col-md-6">
                        <RadzenTextBox @bind-Value="costDetails.AdditionalCostName" Style="width:100%" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <RadzenLabel Text="Packaging Material Cost:" />
                    </div>
                    <div class="col-md-6">
                        <RadzenTextBox @bind-Value="costDetails.AdditionalCostValue" Style="width:100%" />
                    </div>
                </div>
            </RadzenCard>

            
    

<hr/>
<RadzenText Text="Period:"></RadzenText>
<div style="display: flex; align-items: center; gap: 20px; margin-bottom: 20px;">
    <!-- Date pickers configured to display only Month and Year -->
    <RadzenDatePicker @bind-Value="startDate" DateFormat="MMM yyyy" Style="width:200px" />
    <RadzenLabel Text="to" />
    <RadzenDatePicker @bind-Value="endDate" DateFormat="MMM yyyy" Style="width:200px" />
    <RadzenButton Text="Load Prices" Click="LoadPrices" Style="margin-left:20px" />
</div>

@if (monthPrices?.Count > 0)
{
    <h4>Prices from @startDate.ToString("MMM yyyy") to @endDate.ToString("MMM yyyy")</h4>
    <table class="table table-bordered">
        <thead>
            <tr>
                @foreach (var mp in monthPrices)
                {
                    <th>@mp.Month.ToString("MMM yyyy")</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                @foreach (var mp in monthPrices)
                {
                    <td>@mp.Price.ToString("C")</td>
                }
            </tr>
        <td>
            <RadzenButton Text="Modify" Click="OpenCostDetailsDialog" Style="width:100%" />
        </td>
        </tbody>
    </table>
}
else
{
    <p>No data loaded.</p>
}

@code {
    // Lists to hold the data
    List<Customer> customers = new();
    List<CustomerDeliveryDetail> deliveryAddresses = new();
    List<ProductType> productTypes = new();

    // Selected values
    int selectedCustomer;
    int selectedDelivery;
    int selectedProductType;

    List<Recipe> recipes = new();
    // Selected recipe id from the dropdown.
    int selectedRecipeId;
    // The currently selected recipe.
    Recipe selectedRecipe;
    // List to hold ingredients of the selected recipe.
    List<RecipeIngredient> selectedRecipeIngredients = new();

    public class CostDetails
    {
        public string Sugar { get; set; } = "0.00";
        public string CocoaMass { get; set; } = "0.00";
        public string Energy { get; set; } = "0.00";
        public string BoxCost { get; set; } = "0.00";
        public string Freight { get; set; } = "0.00";
        public string PremiumCost { get; set; } = ""; 
        public string AdditionalCostName { get; set; } = "";
        public string AdditionalCostValue { get; set; } = "0.00";
    }

    CostDetails costDetails = new CostDetails();
    List<string> premiumOptions = new List<string> { "Option A", "Option B", "Option C" };


    protected override async Task OnInitializedAsync()
    {
        // Load all customers
        customers = await MDS.GetAllCustomersAsync();

        // Load product types from the newly created table.
        productTypes = await MDS.GetProductTypesAsync();

        recipes = await MDS.GetRecipesAsync();
    }

    async Task OnCustomerChanged(object value)
    {
        if (selectedCustomer > 0)
        {
            // Load delivery addresses for the selected customer
            deliveryAddresses = await MDS.GetDeliveryDetailsForCustomerAsync(selectedCustomer);
        }
        else
        {
            deliveryAddresses.Clear();
        }
    }

    async Task OnRecipeChanged(object value)
    {
        selectedRecipeId = (int)value;
        // Find the selected recipe from the list.
        selectedRecipe = recipes.FirstOrDefault(r => r.RecipeId == selectedRecipeId);
        if (selectedRecipe != null)
        {
            // Load its ingredients.
            selectedRecipeIngredients = selectedRecipe.RecipeIngredients.ToList();
        }
        else
        {
            selectedRecipeIngredients.Clear();
        }
        await InvokeAsync(StateHasChanged);
    }

    // Using DateTime for the RadzenDatePicker; we'll use the first day of the month for processing.
    DateTime startDate = DateTime.Today;
    DateTime endDate = DateTime.Today;

    // Class to represent a month and its randomly generated price.
    class MonthPrice
    {
        public DateTime Month { get; set; }
        public decimal Price { get; set; }
    }

    List<MonthPrice> monthPrices = new List<MonthPrice>();
    Random rnd = new Random();

    void LoadPrices()
    {
        if (startDate > endDate)
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Invalid Range",
                    Detail = "Start date must be before end date."
                });
            return;
        }

        // Clear previous results.
        monthPrices.Clear();

        // Round start and end dates to the first day of their month.
        var start = new DateTime(startDate.Year, startDate.Month, 1);
        var end = new DateTime(endDate.Year, endDate.Month, 1);

        var current = start;
        while (current <= end)
        {
            // Generate a random price between 10 and 100.
            decimal randomPrice = (decimal)(rnd.NextDouble() * 90 + 10);
            monthPrices.Add(new MonthPrice { Month = current, Price = randomPrice });
            current = current.AddMonths(1);
        }
    }

    async Task OpenCostDetailsDialog()
    {
        // Open the dialog. In this demo, we pass no parameters.
        await DialogService.OpenAsync<CostDetailDialog>(
            "Edit Cost Details",
            new Dictionary<string, object>(),
            new DialogOptions() { Width = "600px", Height = "500px" });
    }
}

