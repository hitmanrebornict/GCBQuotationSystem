@page "/TerminalCost"
@using Radzen
@using Radzen.Blazor
@using System.IO
@using ClosedXML.Excel
@using Microsoft.AspNetCore.Components.Forms
@inject DialogService DialogService
@inject MasterDataServices MDS
@inject NotificationService NotificationService

<RadzenCard>
    <h3>Terminal Cost</h3>
    <hr />
    <div class="d-flex justify-content-between mb-4">
        <div>
            <RadzenButton Text="Create New Terminal Cost"
                          Icon="add_circle_outline"
                          ButtonStyle="ButtonStyle.Primary"
                          Click="@CreateButtonOnClick" />
            <RadzenButton Text="Upload Excel"
                          Icon="upload_file"
                          ButtonStyle="ButtonStyle.Secondary"
                          Click="@(() => showUpload = true)"
                          Class="ms-2" />
        </div>
    </div>

    @if (showUpload)
    {
        <div class="mb-4">
            <RadzenUpload Accept=".xlsx"
                          Auto="true"
                          Multiple="false"
                          Progress="@((args) => OnProgress(args))"
                          Data=@uploadData
                          Change=@(args => OnChange(args))
                          ChooseText="Choose Excel File"
                          Class="w-100" />
        </div>
    }

    <RadzenDataGrid Data="@terminalCosts"
                    TItem="TerminalCost"
                    AllowFiltering="true"
                    AllowSorting="true"
                    AllowPaging="true"
                    PageSize="10"
                    FilterMode="FilterMode.CheckBoxList"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    EmptyText="No terminal costs found">
        <Columns>
            <RadzenDataGridColumn Property="PeriodName" Title="Period Name" Width="150px" />
            <RadzenDataGridColumn Property="TerminalPeriod" Title="Terminal Period" FormatString="{0:yyyy-MM-dd}" Width="150px" />
            <RadzenDataGridColumn Property="LifeGbp" Title="Life GBP" FormatString="{0:C2}" Width="120px" />
            <RadzenDataGridColumn Property="Liquor" Title="Liquor" FormatString="{0:C2}" Width="120px" />
            <RadzenDataGridColumn Property="Butter" Title="Butter" FormatString="{0:C2}" Width="120px" />
            <RadzenDataGridColumn Property="Powder" Title="Powder" FormatString="{0:C2}" Width="120px" />
            <RadzenDataGridColumn TItem="TerminalCost" Title="Actions" TextAlign="TextAlign.Center" Width="120px">
                <Template Context="terminalCost">
                    <RadzenButton Icon="edit"
                                  ButtonStyle="ButtonStyle.Info"
                                  Size="ButtonSize.Medium"
                                  Variant="Variant.Flat"
                                  Class="m-1"
                                  Click="@(() => EditTerminalCost(terminalCost))"
                                  ToolTip="Edit Terminal Cost" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

<style>
    .terminal-cost-data-grid {
        height: calc(100vh - 250px);
        min-height: 400px;
    }
</style>

@code {
    private List<TerminalCost> terminalCosts = new List<TerminalCost>();
    private bool showUpload = false;
    private byte[] uploadData;
    
    private void OnProgress(UploadProgressArgs args)
    {
        // Handle upload progress if needed
    }

    private async Task OnChange(UploadChangeEventArgs args)
    {
        try
        {
            var file = args.Files.FirstOrDefault();
            if (file != null)
            {
                using (var stream = file.OpenReadStream())
                {
                    using (var memoryStream = new MemoryStream())
                    {
                        await stream.CopyToAsync(memoryStream);
                        memoryStream.Position = 0;

                        using (var workbook = new XLWorkbook(memoryStream))
                        {
                            var worksheet = workbook.Worksheet(1); // Get first worksheet
                            var rows = worksheet.RowsUsed().Skip(1); // Skip header row

                            foreach (var row in rows)
                            {
                                var periodCode = row.Cell("A").GetString().Trim();
                                var lifeGbp = row.Cell("B").GetValue<decimal>();
                                var liquor = row.Cell("C").GetValue<decimal>();
                                var butter = row.Cell("D").GetValue<decimal>();
                                var powder = row.Cell("E").GetValue<decimal>();

                                // Convert period code to match database format (e.g., "K25" -> "K 2025")
                                var periodName = ConvertPeriodCode(periodCode);

                                // Find matching terminal cost record
                                var terminalCost = terminalCosts.FirstOrDefault(tc => tc.PeriodName == periodName);
                                if (terminalCost != null)
                                {
                                    terminalCost.LifeGbp = lifeGbp;
                                    terminalCost.Liquor = liquor;
                                    terminalCost.Butter = butter;
                                    terminalCost.Powder = powder;

                                    // Update in database
                                    await MDS.UpdateTerminalCostAsync(terminalCost);
                                }
                            }

                            // Refresh the grid
                            terminalCosts = await MDS.GetTerminalCostAsync();
                            await InvokeAsync(StateHasChanged);
                            
                            NotificationService.Notify(NotificationSeverity.Success, "Success", "Terminal costs updated successfully");
                        }
                    }
                }
                showUpload = false;
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", $"Failed to process file: {ex.Message}");
        }
    }

    private string ConvertPeriodCode(string periodCode)
    {
        if (string.IsNullOrEmpty(periodCode) || periodCode.Length < 2)
            return periodCode;

        var letter = periodCode[0].ToString();
        var year = periodCode.Substring(1);
        
        // If year is 2 digits, assume it's 20xx
        if (year.Length == 2)
        {
            year = "20" + year;
        }

        return $"{letter} {year}";
    }

    private async Task CreateButtonOnClick()
    {
        var options = new DialogOptions() 
        { 
            Width = "90vw",
            Height = "90vh",
            CloseDialogOnOverlayClick = false,
            Resizable = true,
            Draggable = true
        };
        
        var result = await DialogService.OpenAsync<AddTerminalCostDialog>("New Terminal Cost", 
            options: options);
            
        if (result == true)
        {
            terminalCosts = await MDS.GetTerminalCostAsync();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task EditTerminalCost(TerminalCost terminalCost)
    {
        var options = new DialogOptions() 
        { 
            Width = "90vw",
            Height = "90vh",
            CloseDialogOnOverlayClick = false,
            Resizable = true,
            Draggable = true
        };
        
        var result = await DialogService.OpenAsync<EditTerminalCostDialog>("Edit Terminal Cost", 
            new Dictionary<string, object>() { { "TerminalCostId", terminalCost.TerminalCostId } },
            options);
            
        if (result == true)
        {
            terminalCosts = await MDS.GetTerminalCostAsync();
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        terminalCosts = await MDS.GetTerminalCostAsync();
    }
} 