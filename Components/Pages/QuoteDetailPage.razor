@attribute [Authorize(Roles = "Sales Admin,Sales User,IT Admin,Admin")]

@page "/QuoteDetailPage"
@inject QuoteDataServices QuoteDataService
@inject DialogService DialogServices
@inject QuoteDetailServices QuoteDetailService
@inject UserPreferenceSettings UserPreferenceSetting

@if(dataLoading){
    <PageTitle>Quote Details</PageTitle>


    <RadzenCard class="mb-4">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <RadzenText Text="Quotation Detail" TextStyle="TextStyle.DisplayH5" class="mb-0"></RadzenText>
            <div class="d-flex align-items-center gap-3">
                <RadzenDropDown 
                @bind-Value="costCalculationMethod" 
                Data="@costCalculationMethods" 
                Change="@OnCostCalculationMethodChanged"
                Placeholder="Select Method" 
                TValue="String"/>
                <RadzenSelectBar @bind-Value=@selectBarInt TValue="int" Change="@(async() => await OnSelectBarChanged(selectBarInt))">
                    <Items>
                        <RadzenSelectBarItem Text="Month" Value="1" />
                        <RadzenSelectBarItem Text="Quarter" Value="2" />
                        <RadzenSelectBarItem Text="Terminal" Value="3" />
                    </Items>
                </RadzenSelectBar>
                @if(isCreateButton){
                    <RadzenButton Text="Create" Click="@CreateButtonOnClick" ButtonStyle="ButtonStyle.Primary" class="px-3"/>
                }
                @if(isInCompletedQuotePage){
                    <RadzenDropDown Data="@UserPreferenceSetting.AvailableWeightUnits" @bind-Value="selectedWeightUnit" Change="@(async() => await OnWeightUnitChanged(selectedWeightUnit))" class="ml-2"/>
                }
            </div>
        </div>
        <div class="row mb-4">
            <div class="col-md-6">
                <RadzenFormField Text="Quotation Remarks" class="w-100">
                    <RadzenTextArea @bind-Value="QuoteRemark" 
                    Placeholder="Enter remarks about this quotation..." 
                    class="w-100" 
                    Rows="3" />
                </RadzenFormField>
            </div>
            <div class="col-md-6">
                <RadzenFormField Text="Customer Remarks" class="w-100">
                    <RadzenTextArea @bind-Value="CustomerRemark" 
                    Placeholder="Enter specific notes for the customer..." 
                    class="w-100" 
                    Rows="3" />
                </RadzenFormField>
            </div>
        </div>

      
        <hr />

        @if (QuoteDataService.RecipeCostMatrix.Any())
        {
            <div class="mb-4">
                <RadzenDataGrid Data="@QuoteDataService.RecipeCostMatrix" TItem="RecipeCostMatrix" GridLines="DataGridGridLines.Both" 
                Class="rounded shadow-sm">
                    <Columns>
                        <RadzenDataGridColumn TItem="RecipeCostMatrix" Property="RecipeCode" Title="Recipe Code">
                            <Template Context="data">
                                <strong>@data.RecipeCode</strong>
                            </Template>
                        </RadzenDataGridColumn>
                        @foreach (var period in QuoteDataService.RecipeCostMatrix.SelectMany(r => r.PeriodCosts.Keys).Distinct())
                        {
                            var formattedPeriod = DateTime.TryParse(period, out var date)
                            ? date.ToString("MMM yyyy")
                            : period; // Fallback to original period if parsing fails

                            <RadzenDataGridColumn TItem="RecipeCostMatrix" Title="@formattedPeriod">
                                <Template Context="data">
                                    <span class="cursor-pointer" @onclick="@(async(args) => await ShowCostDetails(data, period))">
                                        @((data.PeriodCosts.ContainsKey(period))
                                                                                                                            ? data.PeriodCosts[period].ToString("C", UserPreferenceSetting.CultureInfo)
                                                                                                                                                : "0.00")
                                    </span>
                                </Template>
                            </RadzenDataGridColumn>
                        }
                    </Columns>
                </RadzenDataGrid>
            </div>
        }
        else
        {
            <div class="alert alert-info text-center p-4 mb-4">
                <i class="rz-icon-info-circle mr-2"></i>
                <span>No data available.</span>
            </div>
        }


        @if(selectBarInt == 1){
            <hr />

            <div class="d-flex flex-wrap gap-4">
                <!-- Display card for selected quarter -->
                @if (!string.IsNullOrEmpty(selectedQuarter))
                {
                    <div class="card shadow-sm rounded" style="width: 350px;">
                        <div class="card-header bg-light">
                            <RadzenDropDown @bind-Value="selectedQuarter"
                            Data="@uniqueQuarters"
                            Placeholder="Select Quarter"
                            Class="w-100" />
                        </div>
                        <ul class="list-group list-group-flush">
                            @foreach (var item in GetFilteredMaterials(selectedQuarter))
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span>@item.MaterialName</span>
                                    <RadzenNumeric @bind-Value="item.Cost"
                                    Change="@(async (value) => await OnRawMaterialCostChanged(selectedQuarter, item.MaterialName, value))"
                                    Style="width: 120px;"
                                    TValue="decimal"
                                    ShowUpDown="false"
                                    Format="c"
                                    Name="costInput"
                                    Min="0" />
                                </li>
                            }
                        </ul>
                    </div>
                }

                @if (selectedTerminalQuarter != null)
                {
                    <div class="card shadow-sm rounded" style="width: 350px;">
                        <div class="card-header bg-light">
                            <RadzenDropDown @bind-Value="selectedTerminalQuarter"
                            Data="@uniqueTerminalNames"
                            Placeholder="Select Terminal Quarter"
                            TextProperty="TerminalName"
                            Change="@(OnTerminalQuarterChanged)"
                            Class="w-100" />
                        </div>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>LifeGBP</span>
                                <RadzenNumeric @bind-Value="selectedTerminalQuarter.LifeGbp"
                                Change="@(async () => await RecalculateTerminalTotal(selectedTerminalQuarter))"
                                Style="width: 120px;"
                                TValue="decimal"
                                ShowUpDown="false"
                                Format="c"
                                Min="0" />
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>Butter</span>
                                <RadzenNumeric @bind-Value="selectedTerminalQuarter.Butter"
                                Change="@(async () => await RecalculateTerminalTotal(selectedTerminalQuarter))"
                                Style="width: 120px;"
                                TValue="decimal"
                                ShowUpDown="false"
                                Min="0" />
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>Liquor</span>
                                <RadzenNumeric @bind-Value="selectedTerminalQuarter.Liquor"
                                Change="@(async () => await RecalculateTerminalTotal(selectedTerminalQuarter))"
                                Style="width: 120px;"
                                TValue="decimal"
                                ShowUpDown="false"
                                Min="0" />
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>Powder</span>
                                <RadzenNumeric @bind-Value="selectedTerminalQuarter.Powder"
                                Change="@(async () => await RecalculateTerminalTotal(selectedTerminalQuarter))"
                                Style="width: 120px;"
                                TValue="decimal"
                                ShowUpDown="false"
                                Min="0" />
                            </li>
                        </ul>
                    </div>
                }


                @if (addtionalCostList != null)
                {
                    <div class="card shadow-sm rounded" style="width: 350px;">
                        <div class="card-header bg-light">
                            <RadzenText Text="Additional Costs" TextStyle="TextStyle.Subtitle1" class="mb-0" />
                        </div>
                        <ul class="list-group list-group-flush">
                            @* <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>Production Cost</span>
                                <RadzenNumeric @bind-Value="@addtionalCostList.FirstOrDefault(a => a.CostName == "ProductionCost").Cost"
                                Change="@(value => onProductionCostChange(value,"ProductionCost"))"
                                Style="width: 120px;"
                                TValue="decimal"
                                ShowUpDown="false"
                                Format="c"
                                Min="0" />
                            </li> *@

                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>Margin</span>
                                <RadzenNumeric @bind-Value="@addtionalCostList.FirstOrDefault(a => a.CostName == "Margin").Cost"
                                Change="@(value => onProductionCostChange(value,"Margin"))"
                                Style="width: 120px;"
                                TValue="decimal"
                                ShowUpDown="false"
                                Format="c"
                                Min="0" />
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>ORD Rebate (%)</span>
                                <RadzenNumeric @bind-Value="@addtionalCostList.FirstOrDefault(a => a.CostName == "ORD Rebate").Cost"
                                Change="@(value => onAdditionalCostAmountChanged(value))"
                                Style="width: 120px;"
                                TValue="decimal"
                                ShowUpDown="false"
                                Min="0" />
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>Discount</span>
                                <div class="d-flex gap-2">
                                    <RadzenDropDown 
                                    @bind-Value="selectedDiscountMethod" 
                                    Data="@(new List<string> { "Percentage", "Amount", "Overall" })" 
                                    TValue="String"
                                    Change="@(async() => await OnDiscountMethodChanged())"
                                    Style="width: 120px;" />
                                    <RadzenNumeric 
                                    @bind-Value="@addtionalCostList.FirstOrDefault(a => a.CostName == "Discount").Cost"
                                    Change="@(value => onDiscountAmountChanged(value))"
                                    Style="width: 120px;"
                                    TValue="decimal"
                                    ShowUpDown="false"
                                    Min="0" />
                                </div>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>Yield</span>
                                <div class="d-flex gap-2">
                                    <RadzenNumeric @bind-Value="@addtionalCostList.FirstOrDefault(a => a.CostName == "Yield").Cost"
                                    Change="@(value => onYieldCostChange(value,"Yield"))"
                                    Style="width: 120px;"
                                    TValue="decimal"
                                    ShowUpDown="false"
                                    Min="0" />
                                    <RadzenNumeric Value="@addtionalCostList.FirstOrDefault(a => a.CostName == "Yield").CostAmount"
                                    Style="width: 120px;"
                                    TValue="decimal"
                                    ShowUpDown="false"
                                    Format="c"
                                    Disabled="true" />
                                </div>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>Custom Charges</span>
                                <div class="d-flex gap-2">
                                    <RadzenNumeric @bind-Value="@addtionalCostList.FirstOrDefault(a => a.CostName == "Custom Charges").Cost"
                                    Change="@(value => onCustomChargesChange(value,"Custom Charges"))"
                                    Style="width: 120px;"
                                    TValue="decimal"
                                    ShowUpDown="false"
                                    Min="0"
                                    Format="c" />
                                </div>
                            </li>
                        </ul>
                    </div>
                }

                <!-- Add new Financial Cost box -->
                <div class="card shadow-sm rounded" style="width: 350px;">
                    <div class="card-header bg-light">
                        <RadzenText Text="Financial Costs" TextStyle="TextStyle.Subtitle1" class="mb-0" />
                    </div>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>Financial Cost (%)</span>
                            <RadzenNumeric 
                            @bind-Value="financialCostPercentage"
                            Change="@(async (value) => await onFinancialCostChanged(value))"
                            Style="width: 120px;"
                            TValue="decimal"
                            ShowUpDown="false"
                            Min="0" />
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>Financial Days</span>
                            <RadzenNumeric 
                            @bind-Value="financialDays"
                            Change="@(async (value) => await onFinancialDaysChanged(value))"
                            Style="width: 120px;"
                            TValue="int"
                            ShowUpDown="true"
                            Min="0" />
                        </li>
                    </ul>
                </div>

                <!-- Add new Delivery Cost box -->
                <div class="card shadow-sm rounded" style="width: 350px;">
                    <div class="card-header bg-light">
                        <RadzenText Text="Delivery Costs" TextStyle="TextStyle.Subtitle1" class="mb-0" />
                    </div>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>Delivery Cost</span>
                            <RadzenNumeric 
                            @bind-Value="deliveryCostAmount"
                            Change="@(async (value) => await onDeliveryCostChanged(value))"
                            Style="width: 120px;"
                            TValue="decimal"
                            ShowUpDown="false"
                            Format="c"
                            Min="0" />
                        </li>
                     
                    </ul>
                </div>
            </div>
            <hr/>
        }
    </RadzenCard>
}


@code{

    // [Parameter]
    // public List<RecipeTotalCost> QuoteDataService.RecipeTotalCostList { get; set; } = new();

    // [Parameter]
    // public List<RecipeCostMatrix>  QuoteDataService.RecipeCostMatrix { get; set; } = new();

    [Parameter]
    public bool isCreateButton { get; set; } = false;

    [Parameter]
    public bool isInCompletedQuotePage { get; set; } = false;

    [Parameter]
    public string QuoteRemark { get; set; } = null;

    [Parameter]
    public string CustomerRemark { get; set; } = null;

    public System.Globalization.CultureInfo cultureInfo;

    private string selectedDiscountMethod = "Percentage"; // Default method

    private string selectedQuarter;
    private QuotationTerminalCost selectedTerminalQuarter;
    private bool dataLoading = false;
    private int selectBarInt = 1;
    private string selectedWeightUnit;
    private decimal weightRatio;

    // Dictionary to track updated material costs by quarter
    private Dictionary<string, Dictionary<string, decimal>> updatedQuarterMaterialCosts = new();

    private string costCalculationMethod = "Highest";
    private List<string> costCalculationMethods = new List<string> { "Highest", "Average" };

    // Add delivery cost variables
    private decimal deliveryCostAmount = 0;
    private string selectedDeliveryMethod = "Fixed Amount";
    private List<string> deliveryMethods = new List<string> { "Fixed Amount", "Per Unit", "Percentage" };

    protected override async Task OnInitializedAsync()
    {
        selectedQuarter = uniqueQuarters.FirstOrDefault();
        selectedTerminalQuarter = uniqueTerminalNames.FirstOrDefault();
        dataLoading = true;
        selectedWeightUnit = UserPreferenceSetting.WeightUnit;
        UserPreferenceSetting.PrintedWeightUnit = UserPreferenceSetting.WeightUnit;
        weightRatio = UserPreferenceSetting.WeightRatio;

        financialCostPercentage = QuoteDataService.RecipeTotalCostList
        .FirstOrDefault()?.QuotationRecipe1?.QuotationFinancialCost?.InterestRate ?? 0;
        financialDays = QuoteDataService.RecipeTotalCostList
        .FirstOrDefault()?.QuotationRecipe1?.QuotationFinancialCost?.FinanceDays ?? 0;

        // Initialize delivery cost from existing data
        deliveryCostAmount = QuoteDataService.RecipeTotalCostList
        .FirstOrDefault()?.QuotationRecipe1?.QuotationDeliveryCost?.CostAmount ?? 0;

        await InvokeAsync(StateHasChanged);
    }

    // Get unique quarter list for dropdown
    private IEnumerable<string> uniqueQuarters => QuoteDataService.RecipeTotalCostList
        .Select(r => r.Quarter)
        .Distinct();

    private IEnumerable<QuotationTerminalCost> uniqueTerminalNames => QuoteDataService.RecipeTotalCostList
    .OrderBy(r => r.QuotationRecipe1.QuotationTerminalCost.TerminalPeriod)
    .Select(r => r.QuotationRecipe1.QuotationTerminalCost)
    .Where(name => !string.IsNullOrEmpty(name.TerminalName))
    .GroupBy(name => name.TerminalName)
    .Select(group => group.First());

    private IEnumerable<QuotationAdditionalCost> addtionalCostList => QuoteDataService.RecipeTotalCostList
    .Select(r => r.QuotationRecipe1.QuotationAdditionalCosts).FirstOrDefault();

    // private decimal ProductionCost => QuoteDataService.RecipeTotalCostList
    // .Select(r => r.QuotationRecipe1.QuotationProductionCost.ProductTypeCost).FirstOrDefault();

    private decimal financialCostPercentage = 0;
    private int financialDays = 0;

    // Method to show the dialog with the selected cost details
    private async Task ShowCostDetails(RecipeCostMatrix data, string period)
    {
        if (data.PeriodCosts.ContainsKey(period))
        {
            var recipeCode = data.RecipeCode;
            var selectedPeriod = period;
            var totalCost = data.PeriodCosts[period];

            // Find the corresponding RecipeTotalCost using RecipeCode and Period
            var recipeTotalCost = QuoteDataService.RecipeTotalCostList
                .FirstOrDefault(r => r.QuotationRecipe1.Recipe.RecipeCode == recipeCode && r.QuotationRecipe1.PeriodMonth.ToString("MMMM yyyy") == period);

            if (recipeTotalCost != null)
            {
                // var recipeTotalCostClone = QuoteDetailServices.DeepClone(recipeTotalCost);

                var result = await DialogServices.OpenAsync<QuoteDetailsDialog>(
        "Edit Recipe Cost",
        new Dictionary<string, object>() { { "recipeDetailModified", recipeTotalCost }, { "weightRatio", weightRatio } },
        new DialogOptions() { Width = "90%", Height = "90%" });

                if (result != null && result is RecipeTotalCost modifiedRecipeTotalCost)
                {

                    var index = QuoteDataService.RecipeTotalCostList.FindIndex(r => r.QuotationRecipe1.Recipe.RecipeCode == recipeCode
                                           && r.QuotationRecipe1.PeriodMonth.ToString("MMMM yyyy") == period);
                    if (index != -1)
                    {

                        QuoteDataService.RecipeTotalCostList[index] = result;
                        QuoteDataService.RecipeTotalCostList[index] = result;
                    }

                    await RecalculateSingleRecipe(result);
                }

            }
        }
    }

    private async Task RecalculateSingleRecipe(RecipeTotalCost costEntry)
    {
        var recipe = costEntry.QuotationRecipe1;

        // You can check period condition if needed
        // costEntry.TotalCost =
        //     recipe.QuotationPremiumCosts.Sum(x => x.CostAmount) +
        //     recipe.QuotationRawMaterialCosts.Sum(x => x.CostAmount) +
        //     recipe.QuotationPackagingCost.CostAmount +
        //     recipe.QuotationDeliveryCost.CostAmount +
        //     recipe.QuotationAdditionalCosts.Sum(x => x.CostAmount);

        costEntry.TotalCost = QuoteDataService.CalculateTotalCost(recipe);
        // Update matrix for that recipe

        QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareCostMatrix(QuoteDataService.RecipeTotalCostList);

        // QuoteDataService.RecipeCostMatrix = QuoteDataService.RecipeTotalCostList
        //    .GroupBy(r => r.QuotationRecipe1.Recipe.RecipeCode)
        //    .Select(group => new RecipeCostMatrix
        //        {
        //            RecipeCode = group.Key,
        //            PeriodCosts = group.ToDictionary(
        //                r => r.QuotationRecipe1.PeriodMonth.ToString("MMMM yyyy"),
        //                r => r.TotalCost)
        //        })
        //    .ToList();
    }

    // Method to show the dialog with the selected cost details
    private async Task ShowDiscountButton(RecipeCostMatrix data, string period)
    {
        if (data.PeriodCosts.ContainsKey(period))
        {
            var recipeCode = data.RecipeCode;
            var selectedPeriod = period;
            var totalCost = data.PeriodCosts[period];

            // Find the corresponding RecipeTotalCost using RecipeCode and Period
            var recipeTotalCost = QuoteDataService.RecipeTotalCostList
                .FirstOrDefault(r => r.QuotationRecipe1.Recipe.RecipeCode == recipeCode && r.QuotationRecipe1.PeriodMonth.ToString("MMMM yyyy") == period);

            if (recipeTotalCost != null)
            {
                // var recipeTotalCostClone = QuoteDetailServices.DeepClone(recipeTotalCost);

                var result = await DialogServices.OpenAsync<QuoteDetailsDialog>(
        "Edit Recipe Cost",
        new Dictionary<string, object>() { { "recipeDetailModified", recipeTotalCost } },
        new DialogOptions() { Width = "90%", Height = "90%" });

                if (result != null && result is RecipeTotalCost modifiedRecipeTotalCost)
                {

                    var index = QuoteDataService.RecipeTotalCostList.FindIndex(r => r.QuotationRecipe1.Recipe.RecipeCode == recipeCode
                                           && r.QuotationRecipe1.PeriodMonth.ToString("MMMM yyyy") == period);
                    if (index != -1)
                    {
                        QuoteDataService.RecipeTotalCostList[index] = result;
                        QuoteDataService.RecipeTotalCostList[index] = result;
                    }

                    RecalculateSingleRecipe(result);
                }

            }
        }
    }

    private void onProductionCostChange(decimal value, string costName)
    {

        foreach(var qr in QuoteDataService.RecipeTotalCostList){
            qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == costName).Cost = value;
            qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == costName).CostAmount = value * weightRatio ;
            //  qr.TotalCost =
            //  qr.QuotationRecipe1.QuotationPremiumCosts.Sum(x => x.CostAmount) +
            //  qr.QuotationRecipe1.QuotationRawMaterialCosts.Sum(x => x.CostAmount) +
            // qr.QuotationRecipe1.QuotationPackagingCost.CostAmount +
            // qr.QuotationRecipe1.QuotationDeliveryCost.CostAmount +
            // qr.QuotationRecipe1.QuotationAdditionalCosts.Sum(x => x.CostAmount);

            qr.TotalCost = QuoteDataService.CalculateTotalCost(qr.QuotationRecipe1);
        }

        // You can check period condition if needed


        // Update matrix for that recipe
        QuoteDataService.RecipeCostMatrix = QuoteDataService.RecipeTotalCostList
           .GroupBy(r => r.QuotationRecipe1.Recipe.RecipeCode)
           .Select(group => new RecipeCostMatrix
                {
                    RecipeCode = group.Key,
                    PeriodCosts = group.ToDictionary(
                            r => r.QuotationRecipe1.PeriodMonth.ToString("MMMM yyyy"),
                            r => r.TotalCost)
                })
           .ToList();
    }

    private void onAdditionalCostAmountChanged(decimal value){
        if (value >= 0)
        {
            foreach(var qr in QuoteDataService.RecipeTotalCostList){
                qr.TotalCost -= qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "ORD Rebate").CostAmount;
                qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "ORD Rebate").Cost = value;
                qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "ORD Rebate").CostAmount = value / 100 * qr.TotalCost;

                qr.TotalCost = QuoteDataService.CalculateTotalCost(qr.QuotationRecipe1);
            }

            // You can check period condition if needed


            // Update matrix for that recipe
            QuoteDataService.RecipeCostMatrix = QuoteDataService.RecipeTotalCostList
               .GroupBy(r => r.QuotationRecipe1.Recipe.RecipeCode)
               .Select(group => new RecipeCostMatrix
                {
                    RecipeCode = group.Key,
                    PeriodCosts = group.ToDictionary(
                            r => r.QuotationRecipe1.PeriodMonth.ToString("MMMM yyyy"),
                            r => r.TotalCost)
                })
               .ToList();
        }
    }



    // Define the specific material names you want to display
    private List<string> selectedMaterialNames = new List<string> { "Sugar", "Full Cream Milk Powder", "Skimmed Milk Powder" };


    private QuotationTerminalCost GetTerminalCostByName(string terminalName)
    {
        return QuoteDataService.RecipeTotalCostList
            .Select(r => r.QuotationRecipe1.QuotationTerminalCost)
            .FirstOrDefault(t => t.TerminalName == terminalName);
    }

    private IEnumerable<QuotationRawMaterialCost> GetFilteredMaterials(string quarter)
    {
        var firstQuarterEntry = QuoteDataService.RecipeTotalCostList
            .FirstOrDefault(r => r.Quarter == quarter);

        if (firstQuarterEntry == null || firstQuarterEntry.QuotationRecipe1 == null)
            return Enumerable.Empty<QuotationRawMaterialCost>();

        return firstQuarterEntry.QuotationRecipe1.QuotationRawMaterialCosts
            .Where(m => selectedMaterialNames.Contains(m.MaterialName));

    }


    // Called when a price is changed


    // Called when a user updates a material's cost
    private async Task OnRawMaterialCostChanged(string quarter, string materialName, decimal newCost)
    {
        if (!updatedQuarterMaterialCosts.ContainsKey(quarter))
        {
            updatedQuarterMaterialCosts[quarter] = new Dictionary<string, decimal>();
        }

        updatedQuarterMaterialCosts[quarter][materialName] = newCost;

        await RecalculateQuarterTotal(quarter);
    }

    // Recalculate logic with direct updates to RecipeTotalCostList
    private async Task RecalculateQuarterTotal(string quarter)
    {
        if (!updatedQuarterMaterialCosts.TryGetValue(quarter, out var materialUpdates))
            return;

        // Get all recipes for the selected quarter
        var recipesInQuarter = QuoteDataService.RecipeTotalCostList
            .Where(r => r.Quarter == quarter)
            .ToList();

        foreach (var costEntry in recipesInQuarter)
        {
            var recipe = costEntry.QuotationRecipe1;
            List<RecipeIngredient> recipeIngredients = recipe.Recipe.RecipeIngredients.ToList();
            var ingredientDict = recipeIngredients.ToDictionary(x => x.Material.MaterialName, x => x.Amount);

            // Update the material costs based on the changed values
            foreach (var material in recipe.QuotationRawMaterialCosts)
            {
                if (materialUpdates.TryGetValue(material.MaterialName, out var newCost))
                {
                    material.Cost = newCost;
                    material.CostAmount = newCost * ingredientDict[material.MaterialName] / 100 * weightRatio;
                }
            }

            costEntry.TotalCost = QuoteDataService.CalculateTotalCost(recipe);
            // Recalculate the total cost for this recipe
            // costEntry.TotalCost = recipe.QuotationPremiumCosts.Sum(x => x.CostAmount) +
            //                       recipe.QuotationRawMaterialCosts.Sum(x => x.CostAmount) +
            //                       recipe.QuotationPackagingCost.CostAmount +
            //                       recipe.QuotationDeliveryCost.CostAmount +
            //                       recipe.QuotationAdditionalCosts.Sum(x => x.CostAmount);
        }

        // Update the cost matrix based on the updated RecipeTotalCostList
        QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareCostMatrix(QuoteDataService.RecipeTotalCostList);

        await InvokeAsync(StateHasChanged);
    }

    private void OnTerminalQuarterChanged()
    {
        StateHasChanged();
    }

    private async Task RecalculateTerminalTotal(QuotationTerminalCost selectedTerminalCost)
    {
        Console.WriteLine($"RecalculateTerminalTotal called with Powder: {selectedTerminalCost.Powder}");

        var selected = uniqueTerminalNames.FirstOrDefault(t => t.TerminalPeriod == selectedTerminalCost.TerminalPeriod);
        if (selected is null)
        {
            Console.WriteLine("Selected terminal is null, returning early");
            return;
        }

        var currentPeriod = selected.TerminalPeriod;
        Console.WriteLine($"Current period: {currentPeriod}");

        // Step 3: Find the next terminal period
        var lastPeriod = uniqueTerminalNames
            .Where(t => t.TerminalPeriod < currentPeriod)
            .Select(t => t.TerminalPeriod)
            .DefaultIfEmpty(DateOnly.MinValue)
            .Max();

        Console.WriteLine($"Last period: {lastPeriod}");

        // Step 4: Update total cost for recipes between current and next terminal period
        int updatedRecipesCount = 0;
        foreach (var costEntry in QuoteDataService.RecipeTotalCostList)
        {
            var recipe = costEntry.QuotationRecipe1;

            if (recipe.PeriodMonth <= currentPeriod && recipe.PeriodMonth > lastPeriod)
            {
                Console.WriteLine($"Updating recipe {recipe.Recipe.RecipeCode} for period {recipe.PeriodMonth}");
                updatedRecipesCount++;
                
                recipe.QuotationTerminalCost.LifeGbp = selectedTerminalCost.LifeGbp;
                recipe.QuotationTerminalCost.Butter = selectedTerminalCost.Butter;
                recipe.QuotationTerminalCost.Powder = selectedTerminalCost.Powder;
                recipe.QuotationTerminalCost.Liquor = selectedTerminalCost.Liquor;

                Console.WriteLine($"Updated Powder value: {recipe.QuotationTerminalCost.Powder}");

                var updatedMassButterCost = RecalculateRawMaterialCosts(recipe);
               
                // recipe.QuotationRawMaterialCosts = existingCosts.Concat(updatedMassButterCost).ToList();

                foreach (var updatedCost in updatedMassButterCost)
                {
                    // Find existing raw material cost to update (based on MaterialName)
                    var existingCost = recipe.QuotationRawMaterialCosts
                        .FirstOrDefault(x => x.MaterialName == updatedCost.MaterialName);

                    if (existingCost != null)
                    {
                        // Update the existing cost entry
                        existingCost.Cost = updatedCost.Cost;
                        existingCost.CostAmount = updatedCost.CostAmount * weightRatio;
                        Console.WriteLine($"Updated {updatedCost.MaterialName} cost: {updatedCost.Cost}, amount: {existingCost.CostAmount}");
                    }
                    else
                    {
                        // If the cost doesn't exist, add it to the list
                        recipe.QuotationRawMaterialCosts.Add(updatedCost);
                        Console.WriteLine($"Added new {updatedCost.MaterialName} cost: {updatedCost.Cost}");
                    }
                }

                costEntry.TotalCost = QuoteDataService.CalculateTotalCost(recipe);
                Console.WriteLine($"New total cost for {recipe.Recipe.RecipeCode}: {costEntry.TotalCost}");
            }
        }

        Console.WriteLine($"Total recipes updated: {updatedRecipesCount}");

        // Step 5: Regenerate matrix
        // QuoteDataService.RecipeCostMatrix = QuoteDataService.RecipeTotalCostList
        //    .GroupBy(r => r.QuotationRecipe1.Recipe.RecipeCode)
        //    .Select(group => new RecipeCostMatrix
        //        {
        //            RecipeCode = group.Key,
        //            PeriodCosts = group.ToDictionary(
        //                    r => r.QuotationRecipe1.PeriodMonth.ToString("MMMM yyyy"),
        //                    r => r.TotalCost)
        //        })
        //    .ToList();

        QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareCostMatrix(QuoteDataService.RecipeTotalCostList);

        await InvokeAsync(StateHasChanged);
    }


    // private async Task RecalculateTotalCostByChangedQuantity(decimal ChangedQuantity, string SelectedRecipeCode)
    // {

    //     foreach (var item in QuoteDataService.RecipeTotalCostList
    // .Where(r => r.QuotationRecipe1.Recipe.RecipeCode == SelectedRecipeCode))
    //     {

    //         var recipe = item.QuotationRecipe1;

    //         var ChangedRatio = ChangedQuantity / recipe.Quantity;

    //         // Update component costs
    //         foreach (var rawMaterialCost in recipe.QuotationRawMaterialCosts)
    //         {
    //             rawMaterialCost.CostAmount *= ChangedRatio;
    //         }

    //         foreach (var additionalCost in recipe.QuotationAdditionalCosts)
    //         {
    //             additionalCost.CostAmount *= ChangedRatio;
    //         }

    //         if (recipe.QuotationPackagingCost != null)
    //             recipe.QuotationPackagingCost.CostAmount *= ChangedRatio;

    //         if (recipe.


    //             recipe.QuotationDeliveryCost.CostAmount *= ChangedRatio;

    //         foreach (var premiumCost in recipe.QuotationPremiumCosts)
    //         {
    //             premiumCost.CostAmount *= ChangedRatio;
    //         }

    //         // Update quantity
    //         recipe.Quantity = ChangedQuantity;


    //         item.TotalCost =
    //             recipe.QuotationRawMaterialCosts.Sum(x => x.CostAmount) +
    //             recipe.QuotationAdditionalCosts.Sum(x => x.CostAmount) +
    //             recipe.QuotationPremiumCosts.Sum(x => x.CostAmount) +
    //             (recipe.QuotationPackagingCost?.CostAmount ?? 0) +
    //             (recipe.QuotationDeliveryCost?.CostAmount ?? 0);

    //         Console.WriteLine(item.TotalCost);
    //     }
    //     // Step 5: Regenerate matrix
    //      QuoteDataService.RecipeCostMatrix = QuoteDataService.RecipeTotalCostList
    //         .GroupBy(r => r.QuotationRecipe1.Recipe.RecipeCode)
    //         .Select(group => new RecipeCostMatrix
    //             {
    //                 RecipeCode = group.Key,
    //                 PeriodCosts = group.ToDictionary(
    //                             r => r.QuotationRecipe1.PeriodMonth.ToString("MMMM yyyy"),
    //                             r => r.TotalCost)
    //             })
    //         .ToList();

    //     await InvokeAsync(StateHasChanged);
    // }

    private List<QuotationRawMaterialCost> RecalculateRawMaterialCosts(QuotationRecipe recipe)
    {
        Console.WriteLine($"RecalculateRawMaterialCosts called for recipe {recipe.Recipe.RecipeCode}");
        Console.WriteLine($"Terminal values - Powder: {recipe.QuotationTerminalCost.Powder}, Butter: {recipe.QuotationTerminalCost.Butter}, Liquor: {recipe.QuotationTerminalCost.Liquor}, LifeGBP: {recipe.QuotationTerminalCost.LifeGbp}");
        
        var result = recipe.Recipe.RecipeIngredients
            .Where(ingredient =>
                ingredient.Material.MaterialName == "Cocoa Mass" ||
                ingredient.Material.MaterialName == "Cocoa Butter" ||
                ingredient.Material.MaterialName == "Cocoa Powder")
            .Select(ingredient =>
            {
                decimal basePrice = 0;

                if (ingredient.Material.MaterialName == "Cocoa Mass")
                {
                    basePrice = QuoteDataService.CalculateMassTotal(recipe.QuotationTerminalCost.Liquor, recipe.QuotationTerminalCost.LifeGbp);
                    Console.WriteLine($"Cocoa Mass base price: {basePrice} (Liquor: {recipe.QuotationTerminalCost.Liquor}, LifeGBP: {recipe.QuotationTerminalCost.LifeGbp})");
                }
                else if (ingredient.Material.MaterialName == "Cocoa Butter")
                {
                    basePrice = QuoteDataService.CalculateButterTotal(recipe.QuotationTerminalCost.Butter, recipe.QuotationTerminalCost.LifeGbp);
                    Console.WriteLine($"Cocoa Butter base price: {basePrice} (Butter: {recipe.QuotationTerminalCost.Butter}, LifeGBP: {recipe.QuotationTerminalCost.LifeGbp})");
                }
                else if (ingredient.Material.MaterialName == "Cocoa Powder")
                {
                    basePrice = QuoteDataService.CalculatePowderTotal(recipe.QuotationTerminalCost.Powder, recipe.QuotationTerminalCost.LifeGbp);
                    Console.WriteLine($"Cocoa Powder base price: {basePrice} (Powder: {recipe.QuotationTerminalCost.Powder}, LifeGBP: {recipe.QuotationTerminalCost.LifeGbp})");
                }
                
                var costAmount = basePrice * (ingredient.Amount / 100);
                Console.WriteLine($"Material: {ingredient.Material.MaterialName}, Amount: {ingredient.Amount}, Cost: {basePrice}, CostAmount: {costAmount}");
                
                return new QuotationRawMaterialCost
                    {
                        MaterialName = ingredient.Material.MaterialName,
                        Cost = basePrice,
                        CostAmount = costAmount,
                    };
            })
            .ToList();
            
        Console.WriteLine($"RecalculateRawMaterialCosts returning {result.Count} items");
        return result;
    }

    private async void onDiscountAmountChanged(decimal value)
    {
        // if (value >= 0)
        // {

        //     foreach (var qr in QuoteDataService.RecipeTotalCostList)
        //     {
        //         qr.TotalCost -= qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount;
        //         qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").Cost = value;
        //         qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount = -(value / 100 * qr.TotalCost);
        //         qr.TotalCost += qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount;

        //     }

        //     // You can check period condition if needed


        //     // Update matrix for that recipe
        //     QuoteDataService.RecipeCostMatrix = QuoteDataService.RecipeTotalCostList
        //        .GroupBy(r => r.QuotationRecipe1.Recipe.RecipeCode)
        //        .Select(group => new RecipeCostMatrix
        //             {
        //                 RecipeCode = group.Key,
        //                 PeriodCosts = group.ToDictionary(
        //                             r => r.QuotationRecipe1.PeriodMonth.ToString("MMMM yyyy"),
        //                             r => r.TotalCost)
        //             })
        //        .ToList();
        // }

        switch (selectedDiscountMethod)
        {
            case "Percentage":
                foreach (var qr in QuoteDataService.RecipeTotalCostList)
                {   
                    qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Margin").Cost -= qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount;
                    Console.WriteLine(qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Margin").Cost);
                    qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Margin").CostAmount -= qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount;
                    Console.WriteLine(qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Margin").CostAmount);
                    qr.TotalCost -= qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount;
                    qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").Cost = value;
                    qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount = -(value / 100 * qr.TotalCost);


                    qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Margin").Cost += -(value / 100 * qr.TotalCost);
                    Console.WriteLine(qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Margin").Cost);
                    qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Margin").CostAmount += -(value / 100 * qr.TotalCost);
                    Console.WriteLine(qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Margin").CostAmount);

                    qr.TotalCost += qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount;
                }
                break;
            case "Amount":
                foreach (var qr in QuoteDataService.RecipeTotalCostList)
                {
                    qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Margin").Cost -= qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount;
                    qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Margin").CostAmount -= qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount;
                    qr.TotalCost -= qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount;
                    qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").Cost = value;
                    qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount = -value;
                    qr.TotalCost += qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount;
                    qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Margin").Cost += -value;
                    qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Margin").CostAmount += -value;
                }
                break;
            case "Overall":
                foreach (var qr in QuoteDataService.RecipeTotalCostList)
                {
                    qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Margin").Cost -= qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount;
                    qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Margin").CostAmount -= qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount;
                    qr.TotalCost -= qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount;
                    var originalPrice = qr.TotalCost;
                    qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").Cost = value;
                    qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount = -(originalPrice - value);
                    qr.TotalCost += qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount;
                    qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Margin").Cost += -(originalPrice - value);
                    qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Margin").CostAmount += -(originalPrice - value);

                }
                break;
                // You can check period condition if needed



        }

        // Update matrix for that recipe
        QuoteDataService.RecipeCostMatrix = QuoteDataService.RecipeTotalCostList
           .GroupBy(r => r.QuotationRecipe1.Recipe.RecipeCode)
           .Select(group => new RecipeCostMatrix
                       {
                           RecipeCode = group.Key,
                           PeriodCosts = group.ToDictionary(
                                            r => r.QuotationRecipe1.PeriodMonth.ToString("MMMM yyyy"),
                                            r => r.TotalCost)
                       })
           .ToList();

        await InvokeAsync(StateHasChanged);
    }

    private async void CreateButtonOnClick()
    {   
        QuoteDataService.OriginalRecipeTotalList = QuoteDataService.RevertToOriginalUnit(QuoteDataService.RecipeTotalCostList,UserPreferenceSetting.WeightRatio);

        await QuoteDetailService.addQuoteIntoDatabase(QuoteDataService.newQuotation, QuoteDataService.OriginalRecipeTotalList.Select(r => r.QuotationRecipe1).ToList(), UserPreferenceSetting.Currency, QuoteRemark, CustomerRemark);

        var newQuoteId = QuoteDataService.newQuotation.QuoteId;

        NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Success",
                Detail = "Quotation has been successfully created.",
                Duration = 4000
            });

        NavigationManager.NavigateTo($"/QuoteDetailPage/{newQuoteId}");
        // NavigationManager.NavigateTo("/QuotationList");
    }

    private async Task OnSelectBarChanged(int selectBarInt){
        if(selectBarInt == 2){
            if(costCalculationMethod == "Highest"){
                QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareQuarterCostMatrix(QuoteDataService.RecipeTotalCostList);
            }
            else if(costCalculationMethod == "Average"){
                QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareAverageQuarterCostMatrix(QuoteDataService.RecipeTotalCostList);
            }
        }
        else if(selectBarInt == 1){
            if(costCalculationMethod == "Highest"){
                QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareCostMatrix(QuoteDataService.RecipeTotalCostList);
            }
            else if(costCalculationMethod == "Average"){
                QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareAverageCostMatrix(QuoteDataService.RecipeTotalCostList);
            }
        }
        else if(selectBarInt == 3){
            if(costCalculationMethod == "Highest"){
                QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareTerminalCostMatrix(QuoteDataService.RecipeTotalCostList);
            }
            else if(costCalculationMethod == "Average"){
                QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareAverageTerminalCostMatrix(QuoteDataService.RecipeTotalCostList);
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnWeightUnitChanged(string selectedWeightUnit)
    {
        UserPreferenceSetting.PrintedWeightUnit = selectedWeightUnit;

        switch (selectedWeightUnit)
        {
            case "per tonne":
                weightRatio = 1.0m;   // 1 tonne = 1.0
                break;

            case "per kg":
                weightRatio = 0.001m; // 1 kg = 0.001 tonne
                break;

            case "per 100 kg":
                weightRatio = 0.1m;  // 100 kg = 0.1 tonne
                break;

            default:
                throw new ArgumentException("Invalid weight unit selected.");
        }

        QuoteDataService.RecipeTotalCostList = QuoteDataService.ConvertRecipeCostListToPreferredUnit(QuoteDataService.OriginalRecipeTotalList, weightRatio);
        foreach(var item in QuoteDataService.RecipeTotalCostList){
            Console.WriteLine(item.TotalCost);
        }
        QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareCostMatrix(QuoteDataService.RecipeTotalCostList);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnDiscountMethodChanged()
    {
        foreach (var qr in QuoteDataService.RecipeTotalCostList)
        {
            qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Margin").Cost -= qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount;
            qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Margin").CostAmount -= qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount;
            qr.TotalCost -= qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount;
            qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").Cost = 0;
            qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == "Discount").CostAmount = 0;

        }
        // Update matrix for that recipe
        QuoteDataService.RecipeCostMatrix = QuoteDataService.RecipeTotalCostList
           .GroupBy(r => r.QuotationRecipe1.Recipe.RecipeCode)
           .Select(group => new RecipeCostMatrix
                       {
                           RecipeCode = group.Key,
                           PeriodCosts = group.ToDictionary(
                                            r => r.QuotationRecipe1.PeriodMonth.ToString("MMMM yyyy"),
                                            r => r.TotalCost)
                       })
           .ToList();

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnCostCalculationMethodChanged(object value)
    {
        costCalculationMethod = value.ToString();

        // Recalculate costs based on the selected method
        if (costCalculationMethod == "Highest")
        {
            if (selectBarInt == 1)
            {
                QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareCostMatrix(QuoteDataService.RecipeTotalCostList);
            }
            else if (selectBarInt == 2)
            {
                QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareQuarterCostMatrix(QuoteDataService.RecipeTotalCostList);
            }
            else if (selectBarInt == 3)
            {
                QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareTerminalCostMatrix(QuoteDataService.RecipeTotalCostList);
            }
        }
        else if (costCalculationMethod == "Average")
        {
            if (selectBarInt == 1)
            {
                QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareAverageCostMatrix(QuoteDataService.RecipeTotalCostList);
            }
            else if (selectBarInt == 2)
            {
                QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareAverageQuarterCostMatrix(QuoteDataService.RecipeTotalCostList);
            }
            else if (selectBarInt == 3)
            {
                QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareAverageTerminalCostMatrix(QuoteDataService.RecipeTotalCostList);
            }
        }

        // Update the cost matrix


        await InvokeAsync(StateHasChanged);
    }

    private async Task onFinancialCostChanged(decimal value)
    {
        financialCostPercentage = value;
        await CalculateFinancialCost();
    }

    private async Task onFinancialDaysChanged(int value)
    {
        financialDays = value;
        await CalculateFinancialCost();
    }

    private async Task CalculateFinancialCost()
    {
        // if (QuoteDataService.RecipeTotalCostList == null || !QuoteDataService.RecipeTotalCostList.Any())
        //     return;

        if (financialCostPercentage > 0 && financialDays > 0)
        {



            foreach (var qr in QuoteDataService.RecipeTotalCostList)
            {
                var totalFiancialcost = financialCostPercentage / 100 * qr.TotalCost * financialDays / 365;

                qr.TotalCost += totalFiancialcost;

                // Check if QuotationFinancialCost exists, create it if it doesn't
                if (qr.QuotationRecipe1.QuotationFinancialCost == null)
                {
                    qr.QuotationRecipe1.QuotationFinancialCost = new QuotationFinancialCost();
                }

                qr.QuotationRecipe1.QuotationFinancialCost.FinanceDays = financialDays;
                qr.QuotationRecipe1.QuotationFinancialCost.InterestRate = financialCostPercentage;
            }



            QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareCostMatrix(QuoteDataService.RecipeTotalCostList);
            await InvokeAsync(StateHasChanged);

        }
    }

    public async Task onYieldCostChange(decimal value, string costName){

        foreach(var qr in QuoteDataService.RecipeTotalCostList){
            qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == costName).Cost = value;
            qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == costName).CostAmount = value / 100 * qr.QuotationRecipe1.QuotationRawMaterialCosts.Sum(x => x.CostAmount);
            qr.TotalCost += qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == costName).CostAmount;
        }

        QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareCostMatrix(QuoteDataService.RecipeTotalCostList);
        await InvokeAsync(StateHasChanged);
    }

    private async Task onCustomChargesChange(decimal value, string costName){
        foreach(var qr in QuoteDataService.RecipeTotalCostList){
            var customCharge = qr.QuotationRecipe1.QuotationAdditionalCosts.FirstOrDefault(x => x.CostName == costName);
            if (customCharge != null) {
                customCharge.Cost = value;
                customCharge.CostAmount = value; // Direct cost in pounds
            }
            qr.TotalCost = QuoteDataService.CalculateTotalCost(qr.QuotationRecipe1);
        }
        QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareCostMatrix(QuoteDataService.RecipeTotalCostList);
        await InvokeAsync(StateHasChanged);
    }

    private async Task onDeliveryCostChanged(decimal value)
    {
        foreach(var qr in QuoteDataService.RecipeTotalCostList){
            qr.TotalCost -= qr.QuotationRecipe1.QuotationDeliveryCost.CostAmount;
            qr.QuotationRecipe1.QuotationDeliveryCost.CostAmount = value;
                qr.TotalCost += qr.QuotationRecipe1.QuotationDeliveryCost.CostAmount;
            }

            QuoteDataService.RecipeCostMatrix = await QuoteDataService.PrepareCostMatrix(QuoteDataService.RecipeTotalCostList);
            await InvokeAsync(StateHasChanged);
    }

}
